import streamlit as st
import pandas as pd
from datetime import datetime
import altair as alt
import calendar
from utils import lire_onglet_excel, traiter_fichier, determiner_statut
from visualisation import creer_graphique_heures_par_employe, creer_graphiques_par_departement, creer_graphiques_tendance_journaliere, afficher_statut_employes

st.set_page_config(page_title="Calcul des Heures Employ√©s", page_icon="‚è±Ô∏è")

# Initialiser l'√©tat de session pour les r√¥les et modifications manuelles si ce n'est pas d√©j√† fait
if 'employee_roles' not in st.session_state:
    st.session_state.employee_roles = {}
if 'manual_adjustments' not in st.session_state:
    st.session_state.manual_adjustments = {}

# Supprimer les constantes globales, elles seront calcul√©es √† partir des inputs
# SEUIL_CUISINE = 42 * 4.33 
# SEUIL_SALLE = 39 * 4.33

st.title("Calcul des Heures Employ√©s")
st.markdown("Cet outil analyse un fichier Excel de pointage et calcule les heures travaill√©es par employ√©.")

# --- Param√®tres d'analyse --- 
with st.sidebar:
    st.header("Param√®tres des Seuils (Heures Supp.)")
    
    # Nouveaux inputs pour les seuils hebdomadaires par r√¥le
    seuil_hebdo_cuisine = st.number_input("Seuil Cuisine (heures/semaine)", 
                                          min_value=30.0, max_value=50.0, value=42.0, step=0.5,
                                          help="Seuil hebdomadaire pour d√©clencher les heures suppl√©mentaires en Cuisine.")
    seuil_hebdo_salle = st.number_input("Seuil Salle (heures/semaine)", 
                                        min_value=30.0, max_value=50.0, value=39.0, step=0.5,
                                        help="Seuil hebdomadaire pour d√©clencher les heures suppl√©mentaires en Salle.")
    
    # Calcul approximatif des seuils mensuels pour info
    approx_seuil_mensuel_cuisine = seuil_hebdo_cuisine * 4.33
    approx_seuil_mensuel_salle = seuil_hebdo_salle * 4.33
    st.info(f"Cuisine: ~{approx_seuil_mensuel_cuisine:.2f}h/mois")
    st.info(f"Salle: ~{approx_seuil_mensuel_salle:.2f}h/mois")
    
    st.divider()
    st.header("Autres Param√®tres")

    # Garder le filtre par mois
    months_fr = ["Janvier", "F√©vrier", "Mars", "Avril", "Mai", "Juin", 
                "Juillet", "Ao√ªt", "Septembre", "Octobre", "Novembre", "D√©cembre"]
    mois_choisi = st.selectbox("Filtrer par mois", options=months_fr, index=datetime.now().month-1)
    mois_num = months_fr.index(mois_choisi) + 1
    
    # Garder la marge d'alerte
    marge_alerte = st.slider("Marge d'alerte (heures avant quota)", 
                           min_value=1, max_value=20, value=10,
                           help="Affiche une alerte orange quand l'employ√© approche de son quota sp√©cifique (heures restantes)")
    
    montrer_toutes_donnees = st.checkbox("Montrer toutes les donn√©es si aucune donn√©e pour le mois s√©lectionn√©", value=False)

uploaded_file = st.file_uploader("Choisissez un fichier Excel (.xls, .xlsx)", type=["xls", "xlsx"])

onglet = st.text_input("Nom de l'onglet (ex: 'Enregistrement ')", value="Enregistrement ")

if uploaded_file is not None:
    try:
        # Calculer les seuils mensuels r√©els ici, une fois qu'on a les param√®tres
        SEUIL_MENSUEL_CUISINE = seuil_hebdo_cuisine * 4.33
        SEUIL_MENSUEL_SALLE = seuil_hebdo_salle * 4.33
        SEUIL_DEFAUT_MOYEN = (SEUIL_MENSUEL_CUISINE + SEUIL_MENSUEL_SALLE) / 2
        
        with st.spinner('Analyse du fichier en cours...'):
            resultat_df = traiter_fichier(uploaded_file, onglet)
        
        if not resultat_df.empty:
            st.success("Traitement termin√© avec succ√®s!")
            
            # Conversion et filtrage par mois
            resultat_df['date'] = pd.to_datetime(resultat_df['date'])
            resultat_df['mois'] = resultat_df['date'].dt.month
            
            # Filtrer par mois si sp√©cifi√©
            filtered_df = resultat_df.copy()
            if mois_num:
                filtered_df = resultat_df[resultat_df['mois'] == mois_num]
                
            if filtered_df.empty:
                if montrer_toutes_donnees:
                    st.warning(f"Aucune donn√©e disponible pour {mois_choisi}. Affichage de toutes les donn√©es.")
                    filtered_df = resultat_df
                else:
                    st.warning(f"‚ö†Ô∏è Aucune donn√©e disponible pour le mois de {mois_choisi}.")
                    st.info("Pour voir toutes les donn√©es, activez l'option 'Montrer toutes les donn√©es' dans la barre lat√©rale.")
                    mois_disponibles = resultat_df['mois'].unique()
                    mois_disponibles_noms = [months_fr[m-1] for m in mois_disponibles]
                    if len(mois_disponibles) > 0:
                        st.subheader("Mois disponibles dans les donn√©es:")
                        cols = st.columns(len(mois_disponibles))
                        for i, (col, mois_nom) in enumerate(zip(cols, mois_disponibles_noms)):
                            with col:
                                st.metric(label=f"Mois {i+1}", value=mois_nom)
                    st.stop()
            
            # --- Section pour assigner les r√¥les ---
            st.subheader("Assigner les r√¥les (Cuisine/Salle)")
            roles_updated = False
            cols_roles = st.columns(2) 
            col_idx = 0
            
            unique_employees = filtered_df[['emp_id', 'name']].drop_duplicates().to_dict('records')

            if not unique_employees:
                 st.warning("Aucun employ√© trouv√© dans les donn√©es filtr√©es pour assigner des r√¥les.")
            else:
                for emp in unique_employees:
                    emp_id = emp['emp_id']
                    emp_name = emp['name']
                    default_role_index = 0 
                    if emp_id in st.session_state.employee_roles:
                        if st.session_state.employee_roles[emp_id] == "Salle":
                            default_role_index = 1
                    else:
                        st.session_state.employee_roles[emp_id] = "Cuisine"
                    with cols_roles[col_idx % 2]:
                        selected_role = st.selectbox(
                            f"R√¥le pour {emp_name} (ID: {emp_id})",
                            options=["Cuisine", "Salle"],
                            key=f"role_{emp_id}",
                            index=default_role_index 
                        )
                    if st.session_state.employee_roles[emp_id] != selected_role:
                        st.session_state.employee_roles[emp_id] = selected_role
                        roles_updated = True 
                    col_idx += 1

            # Ajouter la colonne 'Role' au DataFrame filtr√© principal
            filtered_df['Role'] = filtered_df['emp_id'].map(st.session_state.employee_roles)
            filtered_df['Role'].fillna("Non Assign√©", inplace=True) 

            if roles_updated:
                 st.experimental_rerun()
            
            # Appliquer les modifications manuelles aux donn√©es
            def apply_manual_adjustments(df):
                """Applique les modifications manuelles aux heures travaill√©es"""
                df_adjusted = df.copy()
                for key, new_hours in st.session_state.manual_adjustments.items():
                    emp_id, date_str = key.split('|')
                    mask = (df_adjusted['emp_id'] == emp_id) & (df_adjusted['date'].dt.strftime('%Y-%m-%d') == date_str)
                    df_adjusted.loc[mask, 'hours_worked'] = new_hours
                return df_adjusted
            
            # Appliquer les ajustements manuels
            adjusted_df = apply_manual_adjustments(filtered_df)
            
            # --- Section d'√©dition manuelle des heures ---
            st.subheader("üîß √âdition manuelle des heures")
            st.markdown("*Modifiez les heures pour corriger les probl√®mes de pointeuse (ex: apr√®s minuit)*")
            
            with st.expander("Modifier les heures d'un employ√©", expanded=False):
                # S√©lection de l'employ√©
                employees_options = [(f"{row['name']} (ID: {row['emp_id']})", row['emp_id']) 
                                   for _, row in filtered_df[['emp_id', 'name']].drop_duplicates().iterrows()]
                
                if employees_options:
                    selected_option = st.selectbox(
                        "Choisir un employ√©",
                        options=employees_options,
                        format_func=lambda x: x[0]
                    )
                    selected_emp_display, selected_emp_id = selected_option
                    
                    # R√©cup√©rer les donn√©es de l'employ√© s√©lectionn√©
                    emp_data = filtered_df[filtered_df['emp_id'] == selected_emp_id].copy()
                    emp_data = emp_data.sort_values('date')
                    
                    if not emp_data.empty:
                        st.write(f"**Heures actuelles pour {emp_data.iloc[0]['name']}:**")
                        
                        # Cr√©er une interface d'√©dition pour chaque jour
                        cols = st.columns(3)
                        col_idx = 0
                        
                        for idx, row in emp_data.iterrows():
                            date_str = row['date'].strftime('%Y-%m-%d')
                            date_display = row['date'].strftime('%d/%m/%Y')
                            key = f"{selected_emp_id}|{date_str}"
                            
                            with cols[col_idx % 3]:
                                # Valeur actuelle (originale ou modifi√©e)
                                current_value = st.session_state.manual_adjustments.get(key, row['hours_worked'])
                                
                                new_hours = st.number_input(
                                    f"{date_display}",
                                    min_value=0.0,
                                    max_value=24.0,
                                    value=float(current_value),
                                    step=0.25,
                                    key=f"edit_{key}",
                                    help=f"Heures originales: {row['hours_worked']:.2f}h"
                                )
                                
                                # Sauvegarder la modification si diff√©rente de l'original
                                if abs(new_hours - row['hours_worked']) > 0.01:  # Tol√©rance pour les erreurs de virgule flottante
                                    st.session_state.manual_adjustments[key] = new_hours
                                    st.success(f"‚úì Modifi√©")
                                elif key in st.session_state.manual_adjustments and abs(new_hours - row['hours_worked']) <= 0.01:
                                    # Restaurer √† la valeur originale
                                    del st.session_state.manual_adjustments[key]
                                
                            col_idx += 1
                        
                        # Bouton pour r√©initialiser toutes les modifications de cet employ√©
                        if st.button(f"R√©initialiser toutes les heures de {emp_data.iloc[0]['name']}", key=f"reset_{selected_emp_id}"):
                            keys_to_remove = [k for k in st.session_state.manual_adjustments.keys() 
                                            if k.startswith(f"{selected_emp_id}|")]
                            for k in keys_to_remove:
                                del st.session_state.manual_adjustments[k]
                            st.experimental_rerun()
                
                # Afficher le r√©sum√© des modifications
                if st.session_state.manual_adjustments:
                    st.subheader("üìù R√©sum√© des modifications")
                    modifications_data = []
                    for key, new_hours in st.session_state.manual_adjustments.items():
                        emp_id, date_str = key.split('|')
                        emp_name = filtered_df[filtered_df['emp_id'] == emp_id]['name'].iloc[0]
                        original_hours = filtered_df[
                            (filtered_df['emp_id'] == emp_id) & 
                            (filtered_df['date'].dt.strftime('%Y-%m-%d') == date_str)
                        ]['hours_worked'].iloc[0]
                        
                        modifications_data.append({
                            'Employ√©': emp_name,
                            'Date': pd.to_datetime(date_str).strftime('%d/%m/%Y'),
                            'Heures originales': f"{original_hours:.2f}",
                            'Heures modifi√©es': f"{new_hours:.2f}",
                            'Diff√©rence': f"{new_hours - original_hours:+.2f}"
                        })
                    
                    if modifications_data:
                        st.dataframe(pd.DataFrame(modifications_data), use_container_width=True)
                        
                        if st.button("üóëÔ∏è R√©initialiser toutes les modifications"):
                            st.session_state.manual_adjustments = {}
                            st.experimental_rerun()
            
            # --- Affichage des donn√©es journali√®res (avec modifications) ---
            st.subheader(f"Aper√ßu des heures calcul√©es - {mois_choisi}")
            
            # Ajouter une colonne pour indiquer les modifications
            display_df = adjusted_df.copy()
            display_df['Modifi√©'] = False
            for key in st.session_state.manual_adjustments.keys():
                emp_id, date_str = key.split('|')
                mask = (display_df['emp_id'] == emp_id) & (display_df['date'].dt.strftime('%Y-%m-%d') == date_str)
                display_df.loc[mask, 'Modifi√©'] = True
            
            st.dataframe(display_df[['emp_id', 'name', 'department', 'date', 'hours_worked', 'Role', 'Modifi√©']])
            
            # --- Pr√©paration du CSV (avec donn√©es ajust√©es) ---
            csv = adjusted_df.to_csv(index=False)
            st.download_button(
                label=f"T√©l√©charger le CSV - {mois_choisi}",
                data=csv,
                file_name=f"heures_journalieres_{mois_choisi.lower()}.csv",
                mime="text/csv"
            )
            
            # --- R√©sum√© par employ√© (avec donn√©es ajust√©es) ---
            st.subheader(f"R√©sum√© par employ√© - {mois_choisi}")
            resume = adjusted_df.groupby(['emp_id', 'name', 'department', 'Role'])['hours_worked'].agg(['sum', 'mean', 'count']).reset_index()
            resume.columns = ['ID Employ√©', 'Nom', 'D√©partement', 'Role', 'Heures Totales', 'Moyenne Quotidienne', 'Jours Travaill√©s']
            
            # D√©finir le seuil individuel bas√© sur le r√¥le et les SEUILS MENSUELS calcul√©s
            def get_seuil(role):
                if role == "Cuisine":
                    return SEUIL_MENSUEL_CUISINE
                elif role == "Salle":
                    return SEUIL_MENSUEL_SALLE
                else:
                    # Utiliser la moyenne des seuils comme fallback pour "Non Assign√©"
                    return SEUIL_DEFAUT_MOYEN 
            
            resume['Seuil Individuel'] = resume['Role'].apply(get_seuil)
            
            # Calculs bas√©s sur le seuil individuel (inchang√©s)
            resume['Heures Supp'] = resume.apply(lambda x: max(0, x['Heures Totales'] - x['Seuil Individuel']), axis=1)
            resume['Heures Restantes'] = resume.apply(lambda x: max(0, x['Seuil Individuel'] - x['Heures Totales']), axis=1)
            resume['Statut'] = resume.apply(
                lambda x: determiner_statut(x['Heures Totales'], x['Seuil Individuel'], marge_alerte), 
                axis=1
            )
            
            # Afficher le r√©sum√© mis √† jour (inchang√©)
            st.dataframe(resume[['ID Employ√©', 'Nom', 'D√©partement', 'Role', 'Heures Totales', 'Seuil Individuel', 'Heures Supp', 'Heures Restantes', 'Statut', 'Moyenne Quotidienne', 'Jours Travaill√©s']])
            
            # --- Affichage des statuts visuels ---
            st.subheader("Statut des heures suppl√©mentaires")
            statut_df = resume.sort_values('Heures Totales', ascending=False)
            # Appel inchang√©, la fonction utilise maintenant les donn√©es du df
            afficher_statut_employes(statut_df)
            
            # Bouton pour imprimer le statut des employ√©s
            if st.button("üñ®Ô∏è Imprimer les statuts des employ√©s", key="print_status"):
                # G√©n√©rer le contenu HTML √† imprimer directement avec les donn√©es
                html_content = f"""
                <html>
                <head>
                    <title>Statut des Employ√©s</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; margin: 15px; }}
                        .header {{ text-align: center; margin-bottom: 20px; }}
                        .header h1 {{ font-size: 1.5em; margin: 10px 0; }}
                        .header p {{ font-size: 0.9em; margin: 5px 0; }}
                        .status-grid {{ 
                            display: grid; 
                            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
                            gap: 10px; 
                            max-height: 70vh;
                            overflow: hidden;
                        }}
                        .status-item {{ 
                            border: 2px solid; 
                            padding: 8px; 
                            border-radius: 6px; 
                            font-size: 0.85em;
                            margin-bottom: 0;
                        }}
                        .status-item p {{ margin: 3px 0; line-height: 1.2; }}
                        .legend {{ margin-top: 15px; text-align: center; }}
                        .legend-items {{ display: flex; justify-content: center; gap: 20px; font-weight: bold; font-size: 0.9em; }}
                        @media print {{ 
                            body {{ margin: 10px; font-size: 12px; }} 
                            .header h1 {{ font-size: 1.3em; }}
                            .status-grid {{ 
                                grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
                                gap: 8px;
                                page-break-inside: avoid;
                            }}
                            .status-item {{ 
                                padding: 6px; 
                                font-size: 0.8em;
                                break-inside: avoid;
                            }}
                            .legend {{ margin-top: 10px; }}
                        }}
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>Statut des heures suppl√©mentaires</h1>
                        <p>G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')} - Mois: {mois_choisi}</p>
                    </div>
                    <div class="status-grid">
                """
                
                # Ajouter chaque employ√© avec son statut
                for index, row in statut_df.iterrows():
                    statut = row['Statut']
                    couleurs = {
                        "Normal": "#4CAF50",
                        "Alerte": "#FFA500", 
                        "D√©passement": "#FF5733"
                    }
                    icones = {
                        "Normal": "üü¢",
                        "Alerte": "üü†",
                        "D√©passement": "üî¥"
                    }
                    
                    couleur = couleurs.get(statut, "#FFFFFF")
                    icone = icones.get(statut, "")
                    
                    html_content += f"""
                        <div class="status-item" style="border-color: {couleur};">
                            <p style="font-weight: bold; margin-bottom: 8px;">{icone} {row['Nom']}</p>
                            <p style="margin-bottom: 5px;">{row['Heures Totales']:.1f}h / {row['Seuil Individuel']:.1f}h</p>
                            <p style="margin-bottom: 0px;">{row['Heures Restantes']:.1f}h restantes</p>
                            <p style="margin-bottom: 0px; font-size: 0.9em; color: #666;">R√¥le: {row['Role']}</p>
                        </div>
                    """
                
                html_content += """
                    </div>
                    <div class="legend">
                        <div class="legend-items">
                            <div>üü¢ Normal</div>
                            <div>üü† Proche du quota</div>
                            <div>üî¥ D√©passement</div>
                        </div>
                    </div>
                    <script>
                        window.onload = function() {
                            setTimeout(function() {
                                window.print();
                            }, 100);
                        }
                    </script>
                </body>
                </html>
                """
                
                # Cr√©er un bouton de t√©l√©chargement HTML pour l'impression
                st.download_button(
                    label="üìÑ T√©l√©charger le rapport d'impression (HTML)",
                    data=html_content,
                    file_name=f"statut_employes_{mois_choisi.lower()}_{datetime.now().strftime('%Y%m%d')}.html",
                    mime="text/html"
                )
                
                # Alternative: utiliser JavaScript pour imprimer directement
                escaped_html = html_content.replace('`', '\\`')
                st.components.v1.html(f"""
                <script>
                    function printStatus() {{
                        var printWindow = window.open('', '_blank', 'width=800,height=600');
                        printWindow.document.write(`{escaped_html}`);
                        printWindow.document.close();
                        printWindow.focus();
                        setTimeout(function() {{
                            printWindow.print();
                        }}, 500);
                    }}
                    printStatus();
                </script>
                """, height=0)
            
            # --- Graphiques --- 
            st.subheader("Visualisations")
            tab1, tab2, tab3 = st.tabs(["Heures totales par employ√©", "Heures par d√©partement", "Tendance journali√®re"])
            
            # Utiliser la moyenne des seuils pour la ligne de r√©f√©rence globale des graphiques
            seuil_ref_graphiques = SEUIL_DEFAUT_MOYEN
            # Calcul d'une moyenne journali√®re indicative pour le graphique de tendance
            heures_jour_ref = seuil_ref_graphiques / 21 # Approximation avec 21 jours/mois
            
            with tab1:
                st.subheader(f"Heures totales travaill√©es par employ√© - {mois_choisi}")
                
                # Filtrer les donn√©es ajust√©es par r√¥le
                df_cuisine_adj = adjusted_df[adjusted_df['Role'] == 'Cuisine']
                df_salle_adj = adjusted_df[adjusted_df['Role'] == 'Salle']
                
                # Cr√©er et afficher le graphique pour la Cuisine
                if not df_cuisine_adj.empty:
                    st.subheader("üë®‚Äçüç≥ Employ√©s Cuisine")
                    chart_cuisine = creer_graphique_heures_par_employe(df_cuisine_adj, SEUIL_MENSUEL_CUISINE, "Cuisine")
                    st.altair_chart(chart_cuisine, use_container_width=True)
                else:
                    st.info("Aucune donn√©e pour les employ√©s de Cuisine ce mois-ci.")
                
                st.divider()
                
                # Cr√©er et afficher le graphique pour la Salle
                if not df_salle_adj.empty:
                    st.subheader("üíÅ Employ√©s Salle")
                    chart_salle = creer_graphique_heures_par_employe(df_salle_adj, SEUIL_MENSUEL_SALLE, "Salle")
                    st.altair_chart(chart_salle, use_container_width=True)
                else:
                    st.info("Aucune donn√©e pour les employ√©s de Salle ce mois-ci.")
            
            with tab2:
                st.subheader(f"Heures travaill√©es par d√©partement - {mois_choisi}")
                # Passer la moyenne des seuils comme r√©f√©rence visuelle avec donn√©es ajust√©es
                chart1, chart_combo, pie = creer_graphiques_par_departement(adjusted_df, seuil_ref_graphiques)
                st.altair_chart(chart1, use_container_width=True)
                st.altair_chart(chart_combo, use_container_width=True)
                st.altair_chart(pie, use_container_width=True)
            
            with tab3:
                st.subheader(f"Tendance des heures travaill√©es par jour - {mois_choisi}")
                # Passer la moyenne journali√®re indicative comme r√©f√©rence avec donn√©es ajust√©es
                chart, heatmap = creer_graphiques_tendance_journaliere(adjusted_df, heures_jour_ref)
                st.altair_chart(chart, use_container_width=True)
                st.altair_chart(heatmap, use_container_width=True)
        else:
            st.warning("Aucune donn√©e trouv√©e dans le fichier.")
    
    except Exception as e:
        st.error(f"Erreur lors du traitement: {str(e)}")
        st.exception(e) 
else:
    st.info("Veuillez charger un fichier Excel pour commencer.")

# --- Informations suppl√©mentaires --- 
with st.expander("√Ä propos de l'application"):
    st.markdown(f"""
    Cette application analyse les fichiers de pointage et calcule les heures travaill√©es pour chaque employ√©.
    Elle prend en compte des seuils d'heures suppl√©mentaires **configurables par r√¥le** (actuellement {seuil_hebdo_cuisine}h/semaine pour la Cuisine et {seuil_hebdo_salle}h/semaine pour la Salle).
    
    **Comment utiliser l'application:**
    1. T√©l√©chargez votre fichier Excel de pointage.
    2. V√©rifiez ou modifiez le nom de l'onglet si n√©cessaire.
    3. **Ajustez les seuils hebdomadaires pour la Cuisine et la Salle dans la barre lat√©rale.**
    4. D√©finissez la marge d'alerte.
    5. **Assignez le r√¥le (Cuisine/Salle) √† chaque employ√© dans la section d√©di√©e.**
    6. **Modifiez manuellement les heures si n√©cessaire** (pour corriger les probl√®mes de pointeuse apr√®s minuit).
    7. L'application calculera les heures travaill√©es et le statut des heures suppl√©mentaires bas√© sur le r√¥le et les seuils d√©finis.
    8. Visualisez les r√©sum√©s, statuts et graphiques (incluant les modifications manuelles).
    9. T√©l√©chargez le r√©sultat d√©taill√© au format CSV.
    """) 